= 常见问题解答 =

== 非技术问题 ==

=== 为啥该项目叫 hprose？ ===

hprose 是 High Performance Remote Object Service Engine 的首字母缩写，翻译成中文是高性能远程对象服务引擎。

=== hprose 怎么发音？ ===

我英语不好，我也不知道该怎么念才对，所以你想怎么念，你随便。我有时候会念 h-prose，有时候会念 h-p-rose，但我基本上不会念成 h-p-r-o-s-e，除了别人问我怎么拼写的时候。

=== hprose 是免费的吗？ ===

是的。hprose 免费，开源，MIT 授权。没有专利风险。

=== 我可以在产品中使用 hprose 吗？ ===

绝对没问题。它是一个被众多项目广泛使用过的久经考验的成熟的开发库。其本身拥有将近十年的开发史，而且作者很勤奋，不但每日都在更新该项目，而且提供实时的 QQ 问题解答。

=== 那你可以告诉我作者的 QQ 号码吗？ ===

我可以告诉你一个比作者 QQ 更好的号码：48855729，这个是 Hprose 技术交流群的 QQ 群号，2000 人的大群，马上要满了，需要的赶紧加，作者们（注意 “们” 哦，不止一个作者）就在里面，加了群，你自然就知道作者们的 QQ 号码了。

== 无语言差别的技术问题 ==

=== hprose 采用什么方式序列化数据？ ===

hprose 拥有自己的[https://github.com/hprose/hprose/blob/master/spec_zh_CN.mediawiki#-2 序列化格式]，这是一种紧凑的半文本的序列化格式。

=== 为什么不使用 XML 序列化方式 ===

XML 太臃肿了，而且解析效率太低。

=== 为什么不使用 JSON 序列化方式 ===

JSON 确实是一种不错的数据序列化方式，但是它可以表示的数据类型有限，不支持数据中包含自引用和互引用，序列化和反序列化复杂数据效率较低。虽然拥有众多的实现，但是不同的实现之间存在很多兼容性问题。

=== 为什么不使用 protobuf 序列化方式 ===

protobuf 确实是一种比较高效的序列化方式，但是 protobuf 的序列化数据不是自描述的，所以，它不适合用于动态远程调用的实现。使用它，需要编写 proto 文件，然后生成客户端和服务器端的框架代码，这样一来，会导致客户端和服务器端紧密耦合，而这恰恰是 hprose 要解决的主要问题之一，所以 hprose 没有采用这种静态代码生成方式的序列化方式，所以这也是不使用类似的 thrift 之类的格式原因。况且 hprose 的序列化实现并不比这些慢，比如在 Java，.NET 等语言中，hprose 动态序列化的性能都远超 protobuf 静态序列化的性能。

